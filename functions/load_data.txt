CREATE OR REPLACE FUNCTION std3_69.load_data(start_month varchar, end_month varchar)
	RETURNS int4
	LANGUAGE plpgsql
	VOLATILE
AS $$
	
	
declare 
	v_table_name text;
	v_sql text;
	v_return int;
begin
	drop table if exists std3_69.about_coupon;--о купонах
create table std3_69.about_coupon as
select store_id, date, p.promo_id, p.good_id, receipt_id, promo_type, discount_val, coupon_num
from std3_69.promos p
	inner join std3_69.coupons c 
	on p.promo_id = c.promo_id and p.good_id = c.good_id
	where date between to_date(start_month, 'YYYYMMDD')
	  and to_date(end_month, 'YYYYMMDD');

drop table if exists std3_69.about_bills;--о покупках
create table std3_69.about_bills as (
select blsh.billnum as billnum, plant, calday, material, sum(qty) as qty,
	   sum(rpa_sat) as rpa_sat
	 from
	 	std3_69.bills_head blsh 
	 inner join 
	 	std3_69.bills_item_external bie 
	 on blsh.billnum = bie.billnum
	where calday between to_date(start_month, 'YYYYMMDD')
	  and to_date(end_month, 'YYYYMMDD')
	 group by blsh.billnum, plant, calday, material); 

drop table if exists std3_69.purchase;--о скидках
create table std3_69.purchase as
(select billnum, plant as store_id, calday as date, qty, rpa_sat, good_id, promo_type, discount_val, coupon_num
		from
		std3_69.about_bills ab 
		inner join 
		std3_69.about_coupon c  
		on billnum = receipt_id and calday = date and plant = store_id and good_id = material);
alter table std3_69.purchase add column discount numeric(17, 3); 
	
update std3_69.purchase --рассчёт скидки
set discount = case 
			   when promo_type = 1 then discount_val 
			   when promo_type = 2 then round((rpa_sat*1.0/qty)*(discount_val*1.0/100), 3)
			   else 0 end;
			  
drop table if exists std3_69.about_discount;--о скидке
create table std3_69.about_discount
as (select store_id, sum(discount) as discount
from std3_69.purchase
group by store_id);

drop table if exists std3_69.about_main;--о кол-ве
create table std3_69.about_main 
as (select plant, sum(total_sum) as rpa, sum(cnt_good) as cnt_good,
	sum(cnt_check)/count(cnt_check) as cnt_check
from
(select plant, sum(rpa_sat) as total_sum, sum(qty) cnt_good, 
	   count(distinct billnum) over(partition by plant) as cnt_check
from std3_69.about_bills 
group by plant, billnum) aa
group by plant);

drop table if exists std3_69.about_goods_stock;--о купонах
create table std3_69.about_goods_stock as --о кол-ве по акции
(select store_id, count(*) from std3_69.purchase
group by store_id);

	drop table if exists v;
	create table v
	with(
		appendonly=true,
		orientation=column, 
		compresstype=zstd,
		compresslevel=1)
	as
		(select s.store_id as store_id, txt, rpa, discount, cnt_good, cnt_check as cnt_cheque, q_pep as cnt_people,
	count as cnt_good_sale
from std3_69.stores s 
inner join std3_69.about_discount ad 
on ad.store_id = s.store_id
inner join std3_69.about_main am 
on s.store_id = am.plant 
inner join 
(select plant, sum(quantity) as q_pep 
from std3_69.traffic
group by plant) as traf
on traf.plant = am.plant
inner join std3_69.about_goods_stock ags 
on ags.store_id = s.store_id)
		 distributed randomly;

	create or replace view std3_69.bill_plan_fact_view as
	(select store_id, txt, rpa, discount, rpa - discount as with_sale, cnt_good, 
		cnt_cheque, cnt_people, cnt_good_sale, round(cnt_good_sale*1.0/cnt_good * 100, 3) as per_good_sale,
		round(cnt_good * 1.0/cnt_cheque, 3) as mean_good, round(cnt_cheque*1.0/cnt_people*100, 3) as koeff, 
		round(rpa*1.0/cnt_cheque, 3) as mean_cheque, round(rpa*1.0/cnt_people, 3) as rpa_pep
	from std3_69.v
	order by store_id);
	
	select count(*) into v_return from v;
	
	v_table_name := 'bill_plan_fact_'||start_month||'';
	execute 'DROP TABLE IF EXISTS '||v_table_name;
	execute 'ALTER TABLE std3_69.v RENAME TO '||v_table_name;
	return v_return;
end;


$$
EXECUTE ON ANY;
